// This file is auto generated by icy-table.
#include "icydb.h"
typedef struct _ptr_to_u32_table{
  char ** column_names;
  char ** column_types;
  size_t count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const pointer * k1, const pointer * k2);
  const size_t sizes[2];

  pointer * key;
  u32 * value;
  icy_mem * key_area;
  icy_mem * value_area;
}ptr_to_u32_table;

ptr_to_u32_table * ptr_to_u32_table_create(const char * optional_name);
void ptr_to_u32_table_set(ptr_to_u32_table * table, pointer key, u32 value);
void ptr_to_u32_table_insert(ptr_to_u32_table * table, pointer * key, u32 * value, size_t count);
void ptr_to_u32_table_lookup(ptr_to_u32_table * table, pointer * keys, size_t * out_indexes, size_t count);
void ptr_to_u32_table_remove(ptr_to_u32_table * table, pointer * keys, size_t key_count);
void ptr_to_u32_table_clear(ptr_to_u32_table * table);
void ptr_to_u32_table_unset(ptr_to_u32_table * table, pointer key);
bool ptr_to_u32_table_try_get(ptr_to_u32_table * table, pointer * key, u32 * value);
void ptr_to_u32_table_print(ptr_to_u32_table * table);
size_t ptr_to_u32_table_iter(ptr_to_u32_table * table, pointer * keys, size_t keycnt, pointer * optional_keys_out, size_t * indexes, size_t cnt, size_t * iterator);
